import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import { sassPlugin } from '@shellscape/esbuild-sass-plugin';
// import esbuildPluginTsc from 'esbuild-plugin-tsc';

const banner =
  `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: [
    './src/main.ts',
    './src/styles.scss'
  ],
  bundle: true,
  // watch: process.argv.includes('--watch'),
  external: [
    'obsidian',
    'electron',
    'tslib',
    // 'reflect-metadata',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  plugins: [sassPlugin({
    basedir: './',
    cssOutfile: './styles.css',
    type: 'css', // по умолчанию — добавлять отдельно, не inline
  })],
  outdir: './',
  // outfile: './main.js',
});

if (prod) {
  // todo: проверить сжатие css
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
